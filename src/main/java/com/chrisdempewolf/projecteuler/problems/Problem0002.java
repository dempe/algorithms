package com.chrisdempewolf.projecteuler.problems;

import com.gs.collections.api.list.MutableList;
import com.gs.collections.impl.factory.Lists;
import com.chrisdempewolf.projecteuler.AbstractBaseResult;
import com.chrisdempewolf.projecteuler.Problem;
import com.chrisdempewolf.projecteuler.Result;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
public class Problem0002 implements Problem {
    private static final int START_1 = 1;
    private static final int START_2 = 2;
    private static final int SEQUENCE_LIMIT = 4000000;

    @Override
    public Result solve() {
        return new ResultImpl();
    }

    private static class ResultImpl extends AbstractBaseResult {
        @Override
        public Number naively() {
            final MutableList<Integer> fibs = Lists.mutable.of(START_1, START_2);
            int prevPrev = START_1;
            int prev = START_2;
            int next;

            while ((next = prevPrev + prev) <= SEQUENCE_LIMIT) {
                fibs.add(next);
                prevPrev = prev;
                prev = next;
            }

            return fibs.parallelStream().filter(n -> n % 2 == 0).mapToInt(Integer::intValue).sum();
        }

        @Override
        public Number nonNaively() {
            return null;
        }
    }

}
